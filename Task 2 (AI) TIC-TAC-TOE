import math

def print_board(board):
    print("\n")
    print(f" {board[0]} | {board[1]} | {board[2]} ")
    print("---+---+---")
    print(f" {board[3]} | {board[4]} | {board[5]} ")
    print("---+---+---")
    print(f" {board[6]} | {board[7]} | {board[8]} ")
    print("\n")

def check_winner(board, player):
    win_combos = [
        [0,1,2],[3,4,5],[6,7,8],  # rows
        [0,3,6],[1,4,7],[2,5,8],  # columns
        [0,4,8],[2,4,6]           # diagonals
    ]
    for combo in win_combos:
        if all(board[i] == player for i in combo):
            return True
    return False

def is_draw(board):
    return all(cell != ' ' for cell in board)

def minimax(board, depth, is_maximizing, ai_player, human_player, alpha, beta):
    if check_winner(board, ai_player):
        return 10 - depth
    if check_winner(board, human_player):
        return depth - 10
    if is_draw(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = ai_player
                eval = minimax(board, depth+1, False, ai_player, human_player, alpha, beta)
                board[i] = ' '
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = human_player
                eval = minimax(board, depth+1, True, ai_player, human_player, alpha, beta)
                board[i] = ' '
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

def best_move(board, ai_player, human_player):
    best_val = -math.inf
    move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = ai_player
            move_val = minimax(board, 0, False, ai_player, human_player, -math.inf, math.inf)
            board[i] = ' '
            if move_val > best_val:
                best_val = move_val
                move = i
    return move

def play_game():
    print("Welcome to Tic-Tac-Toe!")
    board = [' '] * 9

    human_player = ''
    ai_player = ''
    while human_player not in ['X', 'O']:
        human_player = input("Do you want to be X or O? ").upper()
        if human_player not in ['X', 'O']:
            print("Invalid choice. Choose X or O.")
    ai_player = 'O' if human_player == 'X' else 'X'

    turn = ''
    while turn not in ['Y', 'N']:
        turn = input("Do you want to go first? (Y/N): ").upper()

    human_turn = (turn == 'Y')

    print_board(board)

    while True:
        if human_turn:
            try:
                move = int(input(f"Your move (1-9): ")) - 1
                if board[move] != ' ' or move < 0 or move > 8:
                    print("Invalid move. Try again.")
                    continue
                board[move] = human_player
            except (ValueError, IndexError):
                print("Invalid input. Enter a number from 1 to 9.")
                continue
        else:
            print("AI is making its move...")
            move = best_move(board, ai_player, human_player)
            board[move] = ai_player

        print_board(board)

        if check_winner(board, human_player):
            print("Congratulations! You win!")
            break
        elif check_winner(board, ai_player):
            print("AI wins! Better luck next time.")
            break
        elif is_draw(board):
            print("It's a draw!")
            break

        human_turn = not human_turn

if __name__ == "__main__":
    play_game()
